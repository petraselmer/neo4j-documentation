[[cypher-deprecations-additions-removals-compatibility]]
= Deprecations, additions and compatibility

* <<cypher-deprecations-additions-removals, Removals, deprecations, additions and extensions>>
 ** <<cypher-deprecations-additions-removals-3.0, Version 3.0>>
 ** <<cypher-deprecations-additions-removals-3.1, Version 3.1>>
 ** <<cypher-deprecations-additions-removals-3.2, Version 3.2>>
 ** <<cypher-deprecations-additions-removals-3.3, Version 3.3>>
* <<cypher-compatibility, Compatibility>>
 ** <<cypher-start-compatibility, Accessing entities by id via START>>
* <<cypher-versions, Supported language versions>>

[abstract]
--
Cypher is a language that is constantly evolving.
New features get added to the language continuously, and occasionally, some features become deprecated and are subsequently removed.
--

[[cypher-deprecations-additions-removals]]
== Removals, deprecations, additions and extensions

The following tables lists all the features which have been removed, deprecated, added or extended in Cypher.
Replacement syntax for deprecated and removed features are also indicated.

[[cypher-deprecations-additions-removals-3.0]]
=== Version 3.0
[options="header"]
|===
| Feature          | Type | Change | Details
| `has()`  | Function  | Removed | Replaced by <<functions-exists, exists()>>
| `str()`  | Function  | Removed | Replaced by <<functions-tostring, toString()>>
| `{parameter}` | Syntax | Deprecated | Replaced by <<cypher-parameters, $parameter>>
| <<functions-properties, properties()>>  | Function  | Added  |
| <<query-call,CALL [\...YIELD]>>   | Clause  | Added  |
| <<functions-point-cartesian,point() - cartesian 2D>> | Function | Added |
| <<functions-point,point() - WGS 84>> | Function | Added |
| <<functions-distance,distance()>> | Function | Added |
| <<procedures, User-defined procedures>> | Functionality | Added |
|  <<functions-tostring, toString()>>   | Function  | Extended | Now also allows Boolean values as input
|===

[[cypher-deprecations-additions-removals-3.1]]
=== Version 3.1
[options="header"]
|===
| Feature          | Type | Change | Details
| `rels()`   | Function  | Deprecated | Replaced by <<functions-relationships, relationships()>>
| `toInt()`   | Function  | Deprecated | Replaced by <<functions-tointeger, toInteger()>>
| `lower()`   | Function  | Deprecated | Replaced by <<functions-tolower, toLower()>>
| `upper()`   | Function  | Deprecated | Replaced by <<functions-toupper, toUpper()>>
| <<functions-toboolean,toBoolean()>> | Function | Added |
| <<cypher-map-projection, Map projection>> | Syntax | Added |
| <<cypher-pattern-comprehension, Pattern comprehension>> | Syntax | Added |
| <<user-defined-functions, User-defined functions>> | Functionality | Added |
| <<query-call, CALL\...YIELD\...WHERE>>   | Clause  | Extended  | Records returned by `YIELD` may be filtered further using `WHERE`
|===

[[cypher-deprecations-additions-removals-3.2]]
=== Version 3.2
[options="header"]
|===
| Feature          | Type | Change | Details
| `CYPHER planner=rule` (Rule planner)    | Functionality | Removed | All queries now use the cost planner. Any query prepended thus will fall back to using Cypher 3.1.
| `CREATE UNIQUE`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `START`     | Clause | Removed | Running such queries will fall back to using Cypher 3.1 (and use the rule planner)
| `MATCH (n)-[rs*]-() RETURN rs`     | Syntax | Deprecated | Replaced by `MATCH p=(n)-[*]-() RETURN relationships(p) AS rs`
| `MATCH (n)-[:A\|:B\|:C {foo: 'bar'}]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[:A\|B\|C {foo: 'bar'}]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C]-() RETURN n`
| `MATCH (n)-[x:A\|:B\|:C*]-() RETURN n`     | Syntax | Deprecated | Replaced by `MATCH (n)-[x:A\|B\|C*]-() RETURN n`
| <<user-defined-aggregation-functions, User-defined aggregation functions>> | Functionality | Added |
| <<query-schema-index-introduction, Composite indexes>> | Index | Added |
| <<query-constraint-node-key, Node Key>> | Index | Added | Neo4j Enterprise Edition only
| `CYPHER runtime=compiled` (Compiled runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-reverse-list,reverse()>> | Function  | Extended | Now also allows a list as input
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over a set containing both strings and numbers
|===

[[cypher-deprecations-additions-removals-3.3]]
=== Version 3.3
[options="header"]
|===
| Feature          | Type | Change | Details
| `START`     | Clause | Removed | Replaced by the built-in procedures `db.nodeManualIndexSeek`, `db.nodeManualIndexSearch`, `db.relationshipManualIndexSeek`, and `db.relationshipManualIndexSearch`
| `CYPHER runtime=slotted` (Faster interpreted runtime) | Functionality | Added | Neo4j Enterprise Edition only
| <<functions-max, max()>>, <<functions-min, min()>> | Function  | Extended | Now also supports aggregation over a set containing lists of strings and numbers
|===

[[cypher-compatibility]]
== Compatibility

Older versions of the language can still be accessed if required.
There are two ways to select which version to use in queries.

. Setting a version for all queries
You can configure your database with the configuration parameter `cypher.default_language_version`, and enter which version you'd like to use (see <<cypher-versions>>).
Every Cypher query will use this version, provided the query hasn't explicitly been configured as described in the next item below.

. Setting a version on a query by query basis
The other way is on a query by query basis.
By simply putting `CYPHER 2.3` at the beginning, that particular query will be executed with the version of Cypher included in Neo4j 2.3.

Below is an example using the `START` clause to access a legacy index:

[source, cypher]
----
CYPHER 2.3
START n=node:nodes(name = "A")
RETURN n
----


[[cypher-start-compatibility]]
=== Accessing entities by id via START

In versions of Cypher prior to 2.2 it was also possible to access specific nodes or relationships using the `START` clause.
In this case you could use a syntax like the following:

[source, cypher]
----
CYPHER 1.9
START n=node(42)
RETURN n
----

[NOTE]
The use of the `START` clause to find nodes by ID was deprecated from Cypher 2.0 onwards and is now entirely disabled in Cypher 2.2 and up.
You should instead make use of the `MATCH` clause for starting points.
See <<query-match>> for more information on the correct syntax for this.
The `START` clause should only be used when accessing explicit indexes.

[[cypher-versions]]
== Supported language versions

Neo4j 3.3 supports the following versions of the Cypher language:

* Neo4j Cypher 3.3
* Neo4j Cypher 3.2
* Neo4j Cypher 2.3

[TIP]
Each release of Neo4j supports a limited number of old Cypher Language Versions.
When you upgrade to a new release of Neo4j, please make sure that it supports the Cypher language version you need.
If not, you may need to modify your queries to work with a newer Cypher language version.